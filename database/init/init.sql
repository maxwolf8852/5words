CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE IF NOT EXISTS users(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username TEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    created timestamptz NOT NULL default current_timestamp,
    interact timestamptz NOT NULL default current_timestamp,
    coins BIGINT NOT NULL default 0
);

CREATE TABLE IF NOT EXISTS user_gifts(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    link UUID NOT NULL default uuid_generate_v4()
);

CREATE TABLE IF NOT EXISTS all_words(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    word TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS words_5(
    word_id BIGINT PRIMARY KEY,
    word_date TIMESTAMP NOT NULL,
    FOREIGN KEY(word_id) REFERENCES all_words(id)
);

CREATE TABLE IF NOT EXISTS user_attempts(
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    word_id BIGINT NOT NULL,
    user_word TEXT NOT NULL,
    FOREIGN KEY(word_id) REFERENCES all_words(id),
    FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION update_interract() RETURNS TRIGGER AS $$ BEGIN 
UPDATE users SET interact=current_timestamp WHERE id=NEW.user_id;
RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER interact_trigger
AFTER INSERT OR UPDATE OR DELETE ON user_attempts
FOR EACH ROW
EXECUTE FUNCTION update_interract();

CREATE OR REPLACE FUNCTION current_word() RETURNS BIGINT AS $$ BEGIN RETURN (
        COALESCE((SELECT word_id FROM words_5 WHERE word_date = date_trunc('hour', current_timestamp)), -1)
    );
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE clear_table() AS $$ BEGIN
DELETE FROM words_5 WHERE NOT EXISTS (SELECT DISTINCT word_id FROM user_attempts);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION generate_word() RETURNS BIGINT AS $$ BEGIN
IF current_word() = -1 THEN
CALL clear_table();
WITH unused_words_5 AS (SELECT id, word FROM all_words aw LEFT OUTER JOIN words_5 w5 ON aw.id=w5.word_id WHERE LENGTH(aw.word)=5 AND w5.word_date IS NULL)
INSERT INTO words_5 (word_id, word_date) VALUES (( SELECT id FROM unused_words_5 ORDER BY random() LIMIT 1), date_trunc('hour', current_timestamp));
END IF;
RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION check_completed(check_user_ID BIGINT, check_word_ID BIGINT) RETURNS BOOL AS $$ 
BEGIN
RETURN ((SELECT word from all_words aw WHERE aw.id=check_word_ID LIMIT 1) IN (SELECT user_word FROM user_attempts WHERE user_id=check_user_ID AND word_id=check_word_ID));
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION current_uncompleted(usrID BIGINT) RETURNS BIGINT AS $$ 
DECLARE
    curID BIGINT := current_word();
BEGIN
IF curID <> -1 THEN
IF check_completed(usrID, curID)=FALSE THEN
RETURN curID;
END IF;
END IF;
RETURN -1;
END;
$$ LANGUAGE plpgsql;


-- INSERT INTO users (username, password_hash)
-- VALUES (
--         'usr1',
--         '854284cd4f3e76c98e3a61d5de8dfc351ce05b62c789c87cdbc3782d6b0a18b0e649ceebdd94362940a834d0b9fe460e'
--     ) ON CONFLICT DO NOTHING;
